package framework.common;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;

import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.NewCookie;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.WebResource.Builder;
import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;
import com.sun.jersey.core.util.MultivaluedMapImpl;

import framework.listeners.Logs;

public class RestUtilities extends CommonUtilties{

	
	
	
	 public   JSONObject get(String restUrl,boolean Authflag,String userName,String password) throws Exception
     
	    { 
		 Client client = Client.create(); 
		 JSONObject jsonObject=null;
		 JSONParser parser = new JSONParser();
		 
	        	WebResource webResource = client.resource(restUrl);
	        	
	        	if(Authflag)
	        	client.addFilter(new HTTPBasicAuthFilter(userName,password));
	        	
	        	
	        	ClientResponse response = webResource.type("application/json")
	        	.get(ClientResponse.class); 
	        	 
	        	String output = response.getEntity(String.class);
	        	Object obj=parser.parse(output);
	        	jsonObject = (JSONObject) obj;
	       	 	CS_Logs.log(jsonObject+"");
	    	    return jsonObject;
	       
	    }
	
	 
	 public JSONObject post(String restUrl,JSONObject payload,boolean authflag,String userName,String password) throws Exception
     
	    {
	    CS_Logs.log("restUrl*****"+restUrl);
	    CS_Logs.log("payload*****"+payload);
	    
	    JSONObject jsonObject=null;
	    JSONParser parser = new JSONParser();
	    
	    Client client = Client.create();   
	    WebResource webResource = client.resource(restUrl);
	    if(authflag)
	    client.addFilter(new HTTPBasicAuthFilter(userName,password));
	    
	    
	    ClientResponse response = webResource.type("application/json")
	       .post(ClientResponse.class, payload.toString());
	    
	    String output = response.getEntity(String.class);
    	Object obj=parser.parse(output);
    	jsonObject = (JSONObject) obj;
   	 	CS_Logs.log(jsonObject+"");
	    return jsonObject;
	    }
	 
	 public  JSONObject getPayloadAsJsonfromFile(String payloadFileName)
     {
         
         JSONParser parser = new JSONParser();
         JSONObject jsonObject=null;	
         try {
             String path= new File("./Payloads/"+payloadFileName).getCanonicalPath();
             Object obj = parser.parse(new FileReader(path));
        	 jsonObject = (JSONObject) obj;
        	 CS_Logs.log(jsonObject+"");
           
       } catch(Throwable e){CS_Logs.log(e.getMessage());}
       		return jsonObject;
     } 
	@SuppressWarnings("unchecked")
	public JSONObject addorupdateJsonObject(JSONObject json,HashMap<String,Object> map){
		for(String key:map.keySet())
		json.put(key, map.get(key));
		CS_Logs.log("updated json object"+json.toString());
		return json;
	}
	
	
	
	
	public JSONObject getCreateProgressIdPayload(String Email,String progressid) throws Exception{
		 HashMap<String,Object> ProgressId=new HashMap<String, Object>();
		 ProgressId.put("mail", Email);
		 ProgressId.put("uid", progressid);
		 JSONObject createProgressIdPayload=this.addorupdateJsonObject(this.getPayloadAsJsonfromFile("createProgressID"),ProgressId);
		 
		 return createProgressIdPayload;
	}
	
	
	
	
	
	public NewCookie getProgressSessionCookie(){
		String sessionUrl="https://secure-test.progress.com/profile/rest/session?";
		NewCookie JSESSIONID=null;
		Client client1 = Client.create();
		String pwd="j7^Jfx$39A2g";
		String uid="pacificService";
		
	    WebResource webResource1=client1.resource(sessionUrl).queryParam("uid",uid).queryParam("pw",pwd);
	    for(NewCookie c:webResource1.type("application/json").post(ClientResponse.class,"").getCookies())
	    {   if(c.getName().equalsIgnoreCase("JSESSIONID"))
	    	JSESSIONID=new NewCookie("JSESSIONID", c.getValue());
	    }
	    
	    return JSESSIONID;
	    
	}
	@SuppressWarnings("unchecked")
	public int createProgressId(String EmailId,String ProgressId) throws Exception{
		
		CS_Logs.log("Email Id in the Progress Id"+EmailId);
		
		String restUrl="https://secure-test.progress.com/profile/rest/user/"+ProgressId;
		
		
		
			CS_Logs.log(restUrl);
			Client client = Client.create();
			
		    MultivaluedMap<String, String> params = new MultivaluedMapImpl();
		    Iterator iterator = getCreateProgressIdPayload(EmailId, ProgressId).entrySet().iterator();
			Iterator<Map.Entry<String, Object>> it = iterator;
		    
		    while(it.hasNext()){
		    Map.Entry<String, Object> entry = it.next();
		    String key = entry.getKey();
		    if (key != null) {
		    	CS_Logs.log(entry.getKey()+entry.getValue());
		    	params.add(key,entry.getValue()+"");
		    }
		    }
		    
		    Builder webResource = client.resource(restUrl).queryParams(params).cookie(this.getProgressSessionCookie());
		    ClientResponse response1 = webResource.type("application/json")
		       .post(ClientResponse.class,"");
		    System.out.println(response1.getStatus());
		    
		    if(response1.getStatus()==201){this.writeProgressIdintoFile(ProgressId);}
		    
		    return response1.getStatus();
		  
	}
	
	public void deleteProgressId(String ProgressId){
		String restUrl="https://secure-test.progress.com/profile/rest/user/"+ProgressId;
		CS_Logs.log(restUrl);
		Client client = Client.create();
		Builder webResource = client.resource(restUrl).cookie(this.getProgressSessionCookie());
		ClientResponse response1 = webResource.type("application/json").delete(ClientResponse.class);
		System.out.println(response1.getStatus());
	}
	
	
	public void writeProgressIdintoFile(String ProgressId) throws Exception{
		 FileWriter fstream = new FileWriter(new File("./PorgressIds.txt"),true);
		 BufferedWriter out = new BufferedWriter(fstream);
		 out.write(ProgressId);
		 out.newLine();
		 out.close();
		 System.out.println("Done");
		 
	}
	
	public void deleteProgressIds() throws Exception{
		File f=new File("./PorgressIds.txt");
		BufferedReader br = new BufferedReader(new FileReader(f));
		String line;
		while ((line = br.readLine()) != null) {
			this.deleteProgressId(line.trim());
		}
		br.close();
		
		f.delete();
		f.createNewFile();
		
	}
	public String getRandomProgressID() throws Exception{
		 Random rand = new Random();
		 int randomNum = rand.nextInt((100000 - 1) + 1) + 1;
		String ProgressId= "ProgressID"+randomNum;
		 int counter=1;
		 if(this.createProgressId(this.getRandomEmailID(), ProgressId)==201)
		 {
			 return ProgressId;
		 }else{
			 if(counter>=5)
			 return "";
			 counter++;
			 getRandomProgressID();
		 }
		 return "";
	}
	
	public String getRandomProgressID(String EmailId) throws Exception{
		 Random rand = new Random();
		 int randomNum = rand.nextInt((100000 - 1) + 1) + 1;
		String ProgressId= "CS_ProgressID"+randomNum;
		 int counter=1;
		 if(this.createProgressId(EmailId, ProgressId)==201)
		 {
			 return ProgressId;
		 }else{
			 if(counter>=5)
			 return "";
			 counter++;
			 getRandomProgressID(EmailId);
		 }
		 return "";
	}
	public static void main(String a[]) throws Exception{
		System.out.println(new RestUtilities().getRandomProgressID());
	}
	
	public String getProgressIDDefaultPassword()
	{
		return "Progress123";
	}

	
	  

}
