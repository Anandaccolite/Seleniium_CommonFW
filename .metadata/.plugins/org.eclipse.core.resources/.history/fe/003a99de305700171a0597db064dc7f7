package framework.listeners;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.commons.lang.StringEscapeUtils;
import org.testng.IReporter;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import framework.listeners.Logs;
import framework.common.CommonUtilties;
import framework.common.RestUtilities;
import freemarker.template.Configuration;
import freemarker.template.Template;

public class CustomReporter implements IReporter {

	ArrayList<HashMap<String, String>> TestSuite=null;
	List<ArrayList<HashMap<String, String>>> TestSuites=new ArrayList<ArrayList<HashMap<String,String>>>();
	ArrayList<HashMap<String, String>> TestSummaryList=new ArrayList<HashMap<String,String>>();
	HashMap<String, String> TestSummary=null;
	int MasterTotal=0,MasterPassed=0,MasterFailed=0,MasterSkipped=0,MasterSuiteExecutionTime=0;
	String BrowserType=null;
	CommonUtilties cutitlitis=new CommonUtilties();
	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites,
			String outputDirectory) {

	

		
			
			
			for (ISuite suite : suites) {
			
				Map<?, ?> suiteResults = suite.getResults();
				 TestSuite=new ArrayList<HashMap<String, String>>();
				 TestSummary=new HashMap<String, String>();
				 TestSummary.put("SuiteName", suite.getName()+"");
				 
				
				 int pcount=0,fcount=0,scount=0,suiteExecutionTime=0;
				for (Object sr : suiteResults.values()) {
					ISuiteResult sr1 = (ISuiteResult) sr;
					ITestContext tc = sr1.getTestContext();
					
					
					
					///////////////////////////////////////////////////////////
					
					Set<ITestResult> passedtests = tc.getPassedTests().getAllResults();
				    
					
					for (ITestResult pr : passedtests) {
						pcount++;
						MasterPassed++;
						//System.out.println("Passedcount"+pcount);
						HashMap<String, String> PassedTestCaseInformation = new HashMap<String, String>();
						BrowserType=(String) pr.getAttribute("BrowserType");
						PassedTestCaseInformation.put("TestCaseId", pr.getMethod().getGroups()[0].toString());
						PassedTestCaseInformation.put("Description", pr.getMethod().getDescription());
						PassedTestCaseInformation.put("Status", "PASSED");
						PassedTestCaseInformation.put("Time", convertintoMins(pr.getEndMillis()-pr.getStartMillis()));
						suiteExecutionTime+=(pr.getEndMillis()-pr.getStartMillis());
						PassedTestCaseInformation.put("ScreenShotPath", pr.getAttribute("ScreenShotPath").toString());
						PassedTestCaseInformation.put("ErrorStackTrace", StringEscapeUtils.escapeJavaScript(this.getStackAsString(pr.getThrowable())));
						try{PassedTestCaseInformation.put("TestLog", getTestCaseLogFile(Logs.getOutput(pr), pr.getMethod().getMethodName()));}catch(Exception e){e.printStackTrace();}
						
						
						
						
						
						if(PassedTestCaseInformation.get("TestCaseId")!=null)
						TestSuite.add(PassedTestCaseInformation);

					}
					 TestSummary.put("PassedCount", pcount+"");
					////////////////////////////////////////////////////////////
					
					Set<ITestResult> SkippedTests=tc.getSkippedTests().getAllResults();
				       
			       
			        for(ITestResult pr:SkippedTests)
			        {   
			        	fcount++;
			        	MasterSkipped++;
			        	HashMap<String,String> SkipeedTestCaseInformation = new HashMap<String,String>();
			        	BrowserType=(String) pr.getAttribute("BrowserType");
			        	SkipeedTestCaseInformation.put("TestCaseId",pr.getMethod().getGroups()[0].toString());
			        	SkipeedTestCaseInformation.put("Description",pr.getMethod().getDescription());
			        	SkipeedTestCaseInformation.put("Status","FAILED");
			        	SkipeedTestCaseInformation.put("Time",convertintoMins(pr.getEndMillis()-pr.getStartMillis()));
			        	suiteExecutionTime+=(pr.getEndMillis()-pr.getStartMillis());
			        	SkipeedTestCaseInformation.put("ScreenShotPath",pr.getAttribute("ScreenShotPath").toString());
			        	SkipeedTestCaseInformation.put("ErrorStackTrace", StringEscapeUtils.escapeJavaScript(this.getStackAsString(pr.getThrowable())));
			        	try{SkipeedTestCaseInformation.put("TestLog", getTestCaseLogFile(Logs.getOutput(pr), pr.getMethod().getMethodName()));}catch(Exception e){e.printStackTrace();}
			        	
			        	if(SkipeedTestCaseInformation.get("TestCaseId")!=null)
			        	TestSuite.add(SkipeedTestCaseInformation);
			        	
			        	
			        	
			        }
			        TestSummary.put("SkippedCount", scount+"");
					
					
					
					
					//////////////////////////////////////////////////////////////////
			        Set<ITestResult> failedTests=tc.getFailedTests().getAllResults();
				     
			        
			        for(ITestResult pr:failedTests)
			        {   
			        	
			        	fcount++;
			        	MasterFailed++;
			        	HashMap<String,String> FailedTestCaseInformation = new HashMap<String,String>();
			        	BrowserType=(String) pr.getAttribute("BrowserType");
			        	FailedTestCaseInformation.put("TestCaseId",pr.getMethod().getGroups()[0].toString());
			        	FailedTestCaseInformation.put("Description",pr.getMethod().getDescription());
			        	FailedTestCaseInformation.put("Status","FAILED");
			        	
			        	FailedTestCaseInformation.put("Time",convertintoMins(pr.getEndMillis()-pr.getStartMillis()));
			        	suiteExecutionTime+=(pr.getEndMillis()-pr.getStartMillis());
			        	FailedTestCaseInformation.put("ScreenShotPath",pr.getAttribute("ScreenShotPath").toString());
			        	FailedTestCaseInformation.put("ErrorStackTrace", StringEscapeUtils.escapeJavaScript(this.getStackAsString(pr.getThrowable())));
			        	try{FailedTestCaseInformation.put("TestLog", getTestCaseLogFile(Logs.getOutput(pr), pr.getMethod().getMethodName()));}catch(Exception e){e.printStackTrace();}
				       
			        	if(FailedTestCaseInformation.get("TestCaseId")!=null)
			        	TestSuite.add(FailedTestCaseInformation);
			        	
			        	
			        }
			        TestSummary.put("FailedCount", fcount+"");
			        TestSummary.put("SuiteTime",convertintoMins(suiteExecutionTime));
			        
			        /////////////////////////////////////////////////////////////////////
					TestSummary.put("TotalCount", pcount+scount+fcount+"");
					MasterTotal=MasterFailed+MasterPassed+MasterSkipped;
					System.out.println("MasterTotal"+MasterTotal);

					}
				
				
				if(pcount>0||fcount>0||scount>0){
				TestSuites.add(TestSuite);
				TestSummaryList.add(TestSummary);
				MasterSuiteExecutionTime+=suiteExecutionTime;
				}
				
			}
			
			
			for(int i=0;i<TestSummaryList.size();i++)
			{
				HashMap<String, String>TSuite=TestSummaryList.get(i);
				ArrayList<HashMap<String, String>>suite=TestSuites.get(i);
				
				 if(TSuite.get("PassedCount")!=null&&TSuite.get("PassedCount")!=null&&TSuite.get("PassedCount")!=null){	
				      System.out.println(TSuite.get("PassedCount"));
				      System.out.println(TSuite.get("FailedCount"));
				      System.out.println(TSuite.get("SkippedCount"));
				 }
				
				 for(HashMap<String, String>tc:suite){
						System.out.println(tc.get("TestCaseId"));
						System.out.println(tc.get("Description"));
						System.out.println(tc.get("Status"));
						System.out.println(tc.get("Time"));
						System.out.println(tc.get("ScreenShotPath"));
					}
				
			}
			
			if(BrowserType==null){
				try{
					  if(System.getProperty("browser")!=null)
						  BrowserType=System.getProperty("browser").trim();
					  else
						  BrowserType="firefox";
					}catch(Exception e)
					{
						e.printStackTrace();
						BrowserType="firefox";
					}
			}
			createReportFile();
			getEmailableReport(TestSuites,TestSummaryList);
			
			
			
			try {
				
				
				if(cutitlitis.getProperty("AutomationTestReportEmail").trim().equalsIgnoreCase("true"))
				sendEmail();
				
				
				} catch (Exception e) {
				
				e.printStackTrace();
				}
			
				
	}
	
	public void createReportFile(){
		File f=new File("./emailableReport.html");
		if(f.exists()){f.delete();}
		try {
			f.createNewFile();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public String getStackAsString(Throwable th){
		if(th!=null){
		final Writer result = new StringWriter();
	    final PrintWriter printWriter = new PrintWriter(result);
	    th.printStackTrace(printWriter);
	    return result.toString().replace("\"", "");
		}
		return "";
	}
	
	public void getTestReport(List<ArrayList<HashMap<String, String>>> TestSuites, ArrayList<HashMap<String, String>> TestSummaryList) {

		 Configuration cfg = new Configuration();
	        try {
	        	
	        	String passedImagePath=new File(this.getClass().getClassLoader().getResource("/cs_reporting//images/pass.png/").toURI()).getAbsolutePath();
	        	String skippedImagePath=new File("./images/skip.png").getCanonicalPath();
	        	String failedImagePath=new File("./images/fail.png").getCanonicalPath();
	        	String logoImagePath=new File("./images/logo.png").getCanonicalPath();
	        	String emailableReportPath = new File("./TestReport.html").getCanonicalPath(); 
	        	
	            //Load template from source folder
	        	//Template template = cfg.getTemplate("./MarkerTemplates/sample.ftl");
	        	
	        	cfg.setDirectoryForTemplateLoading(new File(this.getClass().getClassLoader().getResource("/cs_reporting/MarkerTemplates/").toURI()));
	        	Template template = cfg.getTemplate("sample.ftl");
	             
	            // Build the data-model
	            Map<String, Object> data = new HashMap<String, Object>();
	            data.put("TestSuites", TestSuites);
				data.put("TestSummaryList", TestSummaryList);
	            data.put("PassedImage", passedImagePath);
	            data.put("BrowserType", BrowserType);
	            data.put("SkippedImage", skippedImagePath);
	            data.put("FailedImage", failedImagePath);
	            data.put("logoImagePath", logoImagePath);
	            data.put("MasterTotal", MasterTotal+"");
	            data.put("MasterPassed", MasterPassed+"");
	            data.put("MasterSkipped", MasterSkipped+"");
	            data.put("MasterFailed", MasterFailed+"");
	            data.put("MasterSuiteTime", convertintoMins(MasterSuiteExecutionTime));
	            // Console output
	            Writer out = new OutputStreamWriter(System.out);
	            template.process(data, out);
	            out.flush();
	 
	            // File output
	            Writer file = new FileWriter (emailableReportPath);
	            template.process(data, file);
	            file.flush();
	            file.close();
	 
	            
	            
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        
	       
	}
	public void getEmailableReport(List<ArrayList<HashMap<String, String>>> TestSuites, ArrayList<HashMap<String, String>> TestSummaryList)
	{
		 Configuration cfg = new Configuration();
	        try {
	        	
	        	
	        	
	        	
	        	String passedImagePath=new File("./images/pass.png").getCanonicalPath();
	        	String skippedImagePath=new File("./images/skip.png").getCanonicalPath();
	        	String failedImagePath=new File("./images/fail.png").getCanonicalPath();
	        	String logoImagePath=new File("./images/logo.png").getCanonicalPath();
	        	String emailableReportPath = new File("./emailableReport.html").getCanonicalPath(); 
	        	
	            //Load template from source folder
	        	//Template template = cfg.getTemplate(".\\cs_reporting\\MarkerTemplates\\sample.ftl");
	        	
	        	
	        	cfg.setClassForTemplateLoading(new CustomReporter().getClass(),"/");
	            Template template = cfg.getTemplate("cs_reporting/MarkerTemplates/sample.ftl");
	             
	            // Build the data-model
	            Map<String, Object> data = new HashMap<String, Object>();
	            data.put("TestSuites", TestSuites);
				data.put("TestSummaryList", TestSummaryList);
	            data.put("PassedImage", passedImagePath);
	            data.put("BrowserType", BrowserType);
	            data.put("SkippedImage", skippedImagePath);
	            data.put("FailedImage", failedImagePath);
	            data.put("logoImagePath", logoImagePath);
	            data.put("MasterTotal", MasterTotal+"");
	            data.put("MasterPassed", MasterPassed+"");
	            data.put("MasterSkipped", MasterSkipped+"");
	            data.put("MasterFailed", MasterFailed+"");
	            data.put("MasterSuiteTime", convertintoMins(MasterSuiteExecutionTime));
	            
	            
	            // Console output
	            Writer out = new OutputStreamWriter(System.out);
	            template.process(data, out);
	            out.flush();
	 
	            // File output
	            Writer file = new FileWriter (emailableReportPath);
	            template.process(data, file);
	            file.flush();
	            file.close();
	 
	            
	            
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        
	        //Deleting all the ProgressIds at the end of the report genaration
	        try {/*new RestUtilities().deleteProgressIds();*/} catch (Exception e) {e.printStackTrace();}}
	
	public static String convertintoMins(long millis){
		return String.format("%d min: %d sec", 
			    TimeUnit.MILLISECONDS.toMinutes(millis),
			    TimeUnit.MILLISECONDS.toSeconds(millis) - 
			    TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))
			);
	}
	
	public String getTestCaseLogFile(List<String> log,String FileName) throws Exception{
		String Filepath=getTestCaseLogFilePath(FileName);
		Logs.log("Starting Writing TestCase log into file"+Filepath);
		
		
		for(String s:log)
		{
			FileWriter fstream = new FileWriter(new File(Filepath),true);
			BufferedWriter out = new BufferedWriter(fstream);
			out.write(s);
			out.newLine();
			out.close();
		}
		Logs.log("Done Writing TestCase log into file"+Filepath);
		return Filepath;
	}
	
	public String getTestCaseLogFilePath(String FileName) throws Exception{
		
		
		File f=new File("./logs/TestCaseLogs/"+FileName);
		if(f.exists()){f.delete();}
		f.createNewFile();
		return f.getCanonicalPath();
		
	}
	public  void sendEmail() throws Exception{
		 
         String body="";
       
         
         Scanner input=new Scanner(new File(new File(".\\emailableReport.html").getCanonicalPath().toString()));
         while(input.hasNext())
        	 body+=input.nextLine();
        
         
         // sets SMTP server properties
         Properties properties = new Properties();
        
         properties.put("mail.smtp.host", this.cutitlitis.getEmailProperty("smtphost").trim());
         properties.put("mail.smtp.port", "587");
         properties.put("mail.debug", "true");
         properties.put("mail.smtp.auth", "true");
     
  
       
         
         //Session session = Session.getDefaultInstance(properties,null);
         final String username=this.cutitlitis.getEmailProperty("username").trim();
         final String password=this.cutitlitis.getEmailProperty("password").trim();
         Session session = Session.getInstance(properties,
                 new javax.mail.Authenticator() {
                   protected PasswordAuthentication getPasswordAuthentication() {
                       return new PasswordAuthentication(username, password);
                   }
                 });
         Message msg = new MimeMessage(session);
         
         msg.setFrom(new InternetAddress(this.cutitlitis.getEmailProperty("fromAddress").trim()));
         InternetAddress[] toAddresses = { new InternetAddress(this.cutitlitis.getEmailProperty("toAddress").trim()) };
         msg.setRecipients(Message.RecipientType.TO, toAddresses);
         msg.setSubject(this.cutitlitis.getEmailProperty("subject").trim());
         msg.setSentDate(new Date());
         msg.setContent(body, "text/html");
         Transport.send(msg);
         
        
	
		
		
	   
	
	}
	
	public static void main(String a[]) throws Exception{
		new CustomReporter().sendEmail();
		
	}


}
